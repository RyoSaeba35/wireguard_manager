<style>
  .client-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
  }
  .client-header {
    margin-bottom: 2rem;
  }
  .client-header h1 {
    color: #2c3e50;
    font-size: 1.8rem;
    margin-bottom: 0.5rem;
  }
  .client-meta {
    color: #666;
    margin-bottom: 2rem;
  }
  .local-time-container {
    position: relative;
    display: inline-block;
    cursor: help;
  }
  .utc-tooltip {
    display: none;
    position: absolute;
    background: #333;
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.9em;
    white-space: nowrap;
    z-index: 100;
    left: 0;
    top: 100%;
  }
  .local-time-container:hover .utc-tooltip {
    display: block;
  }
  .tabs {
    display: flex;
    margin-bottom: 1rem;
    border-bottom: 1px solid #ddd;
  }
  .tab-button {
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    background: none;
    border: none;
    border-bottom: 3px solid transparent;
    font-size: 1rem;
    color: #666;
    transition: all 0.3s ease;
  }
  .tab-button.active {
    color: #27ae60;
    border-bottom: 3px solid #27ae60;
  }
  .tab-content {
    display: none;
    background-color: #f9f9f9;
    padding: 1.5rem;
    border-radius: 0 8px 8px 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  .tab-content.active {
    display: block;
  }
  .qr-code {
    text-align: center;
    margin: 1rem 0;
  }
  .qr-code img {
    max-width: 200px;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 0.5rem;
    background: white;
  }
  .download-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    background-color: #27ae60;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-size: 0.9rem;
    margin-top: 0.5rem;
  }
  .download-link:hover {
    background-color: #219653;
  }
  .alert {
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1rem;
    background-color: #f8d7da;
    color: #e74c3c;
    border-left: 4px solid #e74c3c;
  }
  .info-box {
    padding: 1.5rem;
    border-radius: 4px;
    margin-bottom: 1.5rem;
    text-align: center;
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
  }
  .loading-spinner {
    display: inline-block;
    width: 40px;
    height: 40px;
    border: 3px solid rgba(0,0,0,.1);
    border-radius: 50%;
    border-top-color: #27ae60;
    animation: spin 1s ease-in-out infinite;
    margin: 1rem 0;
  }
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  .progress-container {
    margin: 1.5rem 0;
    text-align: center;
  }
  .progress-bar {
    height: 6px;
    background-color: #e9ecef;
    border-radius: 3px;
    margin: 0.5rem 0;
    overflow: hidden;
  }
  .progress {
    height: 100%;
    background-color: #27ae60;
    width: 0%;
    transition: width 0.3s ease;
  }

  @media (max-width: 768px) {
    .client-container {
      padding: 0 1rem;
      h1 {
        font-size: 1.5rem;
      }
    }
  }
</style>

<div class="client-container">
  <div class="client-header">
    <h1>Subscription: #<%= @subscription.name %></h1>
    <p class="client-meta">
      Expires at:
      <span class="local-time-container">
        <span id="local-time-text">
          <%= @subscription.expires_at.in_time_zone("Etc/UTC").strftime("%Y-%m-%d %H:%M:%S %Z") %>
        </span>
        <span class="utc-tooltip">
          <%= @subscription.expires_at %>
        </span>
      </span>
      (local time)
      â€“
      <span id="countdown">Calculating...</span>
    </p>
  </div>

  <% if @subscription.pending? %>
    <div class="info-box">
      <h3>Your VPN is being set up!</h3>
      <div class="loading-spinner"></div>
      <p>Your configuration files and QR codes are being generated. This may take a few minutes.</p>
      <div class="progress-container">
        <div class="progress-bar">
          <div class="progress" style="width: 100%;"></div>
        </div>
        <p>Preparing your VPN configuration...</p>
      </div>
      <p>You will receive an email at <strong><%= @subscription.user.email %></strong> when everything is ready.</p>
      <p>This page will automatically refresh when your VPN is ready.</p>
      <p style="margin-top: 1rem;">
        While you wait, you can
        <%= link_to "read the setup guide", setup_guide_path %>
        to prepare for connecting your devices.
      </p>
    </div>

    <!-- Auto-reload script -->
    <script>
      // Reload the page every 10 seconds to check for updates
      setTimeout(function() {
        window.location.reload();
      }, 10000);
    </script>
  <% else %>
    <% if @wireguard_clients.any? %>
      <div class="tabs">
        <% @wireguard_clients.each_with_index do |client, index| %>
          <button class="tab-button <%= 'active' if index == 0 %>" data-tab="tab-<%= index %>">
            <%= client.display_name || client.name %>
          </button>
        <% end %>
      </div>
      <% @wireguard_clients.each_with_index do |client, index| %>
        <div id="tab-<%= index %>" class="tab-content <%= 'active' if index == 0 %>">
          <div class="qr-code">
            <h3>QR Code:</h3>
            <%= image_tag download_qr_code_path(filename: "#{client.name}.png") %>
          </div>
          <div>
            <h3>Config File:</h3>
            <%= link_to "Download Config",
                        download_config_path(filename: "#{client.name}.conf"),
                        class: "download-link" %>
          </div>
        </div>
      <% end %>
    <% else %>
      <div class="alert">
        <p>No WireGuard clients found for this subscription.</p>
      </div>
    <% end %>
    <!-- Add this section -->
    <div class="info-box" style="text-align: center; margin-top: 2rem;">
      <h3>Read our Setup Guide for setting up your VPN</h3>
      <p>
        <%= link_to "View Setup Guide", setup_guide_path, class: "download-link", style: "font-size: 1rem; padding: 0.75rem 1.5rem;" %>
      </p>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    initPage();
  });

  document.addEventListener("turbo:load", function() {
    initPage();
  });

  function initPage() {
    // Tab switching logic
    const tabButtons = document.querySelectorAll('.tab-button');
    if (tabButtons.length > 0) {
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const tabId = button.getAttribute('data-tab');
          document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
          });
          document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
          });
          document.getElementById(tabId).classList.add('active');
          button.classList.add('active');
        });
      });
    }

    // Subscription expiration logic
    const utcTime = "<%= j @subscription.expires_at.iso8601 %>";
    const expiresAt = new Date(utcTime);
    const localTimeElement = document.getElementById("local-time-text");
    if (localTimeElement) {
      const day = String(expiresAt.getDate()).padStart(2, '0');
      const month = String(expiresAt.getMonth() + 1).padStart(2, '0');
      const year = expiresAt.getFullYear();
      const hours = String(expiresAt.getHours()).padStart(2, '0');
      const minutes = String(expiresAt.getMinutes()).padStart(2, '0');
      localTimeElement.textContent = `${day}/${month}/${year}, ${hours}h${minutes}`;

      function updateCountdown() {
        const now = new Date();
        const diff = expiresAt - now;
        if (diff <= 0) {
          document.getElementById("countdown").textContent = "Expired";
          return;
        }
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hoursRemaining = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutesRemaining = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        document.getElementById("countdown").textContent =
          `${days}d ${hoursRemaining}h ${minutesRemaining}m remaining`;
      }
      updateCountdown();
      setInterval(updateCountdown, 60000); // Pass the function directly
    }

    // Auto-reload script for pending subscriptions
    <% if @subscription.pending? %>
      setTimeout(() => { // Use arrow function instead of string
        window.location.reload();
      }, 10000);
    <% end %>
  }
</script>

