<style>
  .client-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
  }
  .client-header {
    margin-bottom: 2rem;
  }
  .client-header h1 {
    color: #2c3e50;
    font-size: 1.8rem;
    margin-bottom: 0.5rem;
  }
  .client-meta {
    color: #666;
    margin-bottom: 2rem;
  }
  .local-time-container {
    position: relative;
    display: inline-block;
    cursor: help;
  }
  .utc-tooltip {
    display: none;
    position: absolute;
    background: #333;
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.9em;
    white-space: nowrap;
    z-index: 100;
    left: 0;
    top: 100%;
  }
  .local-time-container:hover .utc-tooltip {
    display: block;
  }
  .tabs {
    display: flex;
    margin-bottom: 1rem;
    border-bottom: 1px solid #ddd;
  }
  .tab-button {
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    background: none;
    border: none;
    border-bottom: 3px solid transparent;
    font-size: 1rem;
    color: #666;
    transition: all 0.3s ease;
  }
  .tab-button.active {
    color: #27ae60;
    border-bottom: 3px solid #27ae60;
  }
  .tab-content {
    display: none;
    background-color: #f9f9f9;
    padding: 1.5rem;
    border-radius: 0 8px 8px 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  .tab-content.active {
    display: block;
  }
  .qr-code {
    text-align: center;
    margin: 1rem 0;
  }
  .qr-code img {
    max-width: 200px;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 0.5rem;
    background: white;
  }
  .download-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    background-color: #27ae60;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-size: 0.9rem;
    margin-top: 0.5rem;
  }
  .download-link:hover {
    background-color: #219653;
  }
  .alert {
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1rem;
    background-color: #f8d7da;
    color: #e74c3c;
    border-left: 4px solid #e74c3c;
  }
</style>

<div class="client-container">
  <div class="client-header">
    <h1>Subscription: <%= @subscription.name %></h1>
    <p class="client-meta">
      Expires at:
      <span class="local-time-container">
        <span id="local-time-text">
          <%= @subscription.expires_at.in_time_zone("Etc/UTC").strftime("%Y-%m-%d %H:%M:%S %Z") %>
        </span>
        <span class="utc-tooltip">
          <%= @subscription.expires_at %>
        </span>
      </span>
      (local time)
      â€“
      <span id="countdown">Calculating...</span>
    </p>
  </div>

  <% if @wireguard_clients.any? %>
    <div class="tabs">
      <% @wireguard_clients.each_with_index do |client, index| %>
        <button class="tab-button <%= 'active' if index == 0 %>" data-tab="tab-<%= index %>">
          <%= client.display_name %>
        </button>
      <% end %>
    </div>

    <% @wireguard_clients.each_with_index do |client, index| %>
      <div id="tab-<%= index %>" class="tab-content <%= 'active' if index == 0 %>">
        <% qr_code_path = Rails.root.join('public', 'qr_codes', "#{client.name}.png") %>
        <div class="qr-code">
          <h3>QR Code:</h3>
          <% if File.exist?(qr_code_path) %>
            <%= image_tag "/qr_codes/#{client.name}.png", alt: "QR Code" %>
          <% else %>
            <div class="alert">
              <p>QR code is not available.</p>
            </div>
          <% end %>
        </div>

        <% sanitized_name = client.name.gsub(/[@.]/, '_') %>
        <% config_path = Rails.root.join('public', 'configs', "#{sanitized_name}.conf") %>
        <div>
          <h3>Config File:</h3>
          <% if File.exist?(config_path) %>
            <p>
              <%= link_to "Download Config",
                          "/configs/#{sanitized_name}.conf",
                          class: "download-link",
                          download: "#{sanitized_name}.conf" %>
            </p>
          <% else %>
            <div class="alert">
              <p>Config file is not available.</p>
            </div>
          <% end %>
        </div>
      </div>
    <% end %>
  <% end %>
</div>

<script>
  document.addEventListener("turbo:load", function() {
    // Tab switching logic
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');

        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });

        // Deactivate all tab buttons
        document.querySelectorAll('.tab-button').forEach(btn => {
          btn.classList.remove('active');
        });

        // Show the selected tab content
        document.getElementById(tabId).classList.add('active');

        // Activate the clicked tab button
        button.classList.add('active');
      });
    });

    // Subscription expiration logic
    const utcTime = "<%= @subscription.expires_at.iso8601 %>";
    const expiresAt = new Date(utcTime);
    const localTimeElement = document.getElementById("local-time-text");

    // Format local time as DD/MM/YYYY, HHhMM
    const day = String(expiresAt.getDate()).padStart(2, '0');
    const month = String(expiresAt.getMonth() + 1).padStart(2, '0');
    const year = expiresAt.getFullYear();
    const hours = String(expiresAt.getHours()).padStart(2, '0');
    const minutes = String(expiresAt.getMinutes()).padStart(2, '0');
    localTimeElement.textContent = `${day}/${month}/${year}, ${hours}h${minutes}`;

    // Update countdown every second
    function updateCountdown() {
      const now = new Date();
      const diff = expiresAt - now;
      if (diff <= 0) {
        document.getElementById("countdown").textContent = "Expired";
        return;
      }
      const days = Math.floor(diff / (1000 * 60 * 60 * 24));
      const hoursRemaining = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutesRemaining = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      document.getElementById("countdown").textContent =
        `${days}d ${hoursRemaining}h ${minutesRemaining}m remaining`;
    }
    updateCountdown();
    setInterval(updateCountdown, 60000); // Update every minute
  });
</script>
